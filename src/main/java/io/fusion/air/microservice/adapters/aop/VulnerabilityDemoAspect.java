/**
 * (C) Copyright 2022 Araf Karsh Hamid
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.fusion.air.microservice.adapters.aop;

import io.fusion.air.microservice.domain.exceptions.BusinessServiceException;
import io.fusion.air.microservice.domain.exceptions.SecurityException;
import io.fusion.air.microservice.server.config.ServiceConfiguration;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;

import static java.lang.invoke.MethodHandles.lookup;
import static org.slf4j.LoggerFactory.getLogger;

/**
 * Extra Protection for Vulnerability Demo
 * By Default these methods are not allowed to be executed.
 * Unless the following Property in the application.properties is set to true
 * server.vulnerability.demos.allowed=true
 *
 * @author  Araf Karsh Hamid
 * @version:
 * @date:
 */
@Aspect
@Configuration
public class VulnerabilityDemoAspect {

    // Set Logger -> Lookup will automatically determine the class name.
    private static final Logger log = getLogger(lookup().lookupClass());

    @Autowired
    private ServiceConfiguration serviceConfig;

    /**
     * Capture Overall Method Execution Time For Controllers
     * @param joinPoint
     * @return
     * @throws Throwable
     */
    @Around(value = "execution(* io.fusion.air.microservice.adapters.controllers.exploits.VulnerableControllerImpl.*(..))")
    public Object timeTrackerRestFixed(ProceedingJoinPoint joinPoint) throws Throwable {
        long startTime = System.currentTimeMillis();
        if(serviceConfig.isVulnerabilityDemoAllowed()) {
            try {
                return joinPoint.proceed();
            }catch(Throwable e) {
                throw e;
            } finally {
                logTime("VD", startTime, "STATUS=DEMO-ALLOWED", joinPoint);
            }
        } else {
            logTime("VD", startTime, "STATUS=DEMO=DENIED", joinPoint);
            throw new SecurityException("Vulnerability Demo is NOT Allowed! Pls Check the Configuration.");
        }
    }

    /**
     * Log Time Taken to Execute the Function
     * @param _startTime
     * @param _status
     * @param joinPoint
     */
    private void logTime(String _method, long _startTime, String _status, ProceedingJoinPoint joinPoint) {
        long timeTaken=System.currentTimeMillis() - _startTime;
        log.info("3|{}|TIME={} ms|{}|CLASS={}|",_method, timeTaken, _status,joinPoint);
    }
}

